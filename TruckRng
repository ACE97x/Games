

-- ======= CONFIG (change these) =======
local KeyLink    = "https://work.ink/224d/rr0nswl3" -- link copied into clipboard/textbox
local GKey       = "yougotkey"                      -- the correct key
local ScriptLink = "https://raw.githubusercontent.com/ACE97x/redesigned-waddle/refs/heads/main/truckRng" -- remote script URL
-- ======= END CONFIG ==================

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- executor/local-file detection
local function has_setclipboard() return type(setclipboard) == "function" end
local function has_writefile() return (type(writefile) == "function") and (type(isfile) == "function") and (type(readfile) == "function") end

local LOCAL_KEY_FILE = "player_key.txt"

-- UI (same as before - trimmed re-creation)
local KeySystem = Instance.new("ScreenGui")
local KeyMain = Instance.new("Frame")
local KeyEnter = Instance.new("TextBox")
local UICorner = Instance.new("UICorner")
local UICorner_2 = Instance.new("UICorner")
local TitleLabel = Instance.new("TextLabel")
local NotifyLabel = Instance.new("TextLabel")

KeySystem.Name = "KeySystem"
KeySystem.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
KeySystem.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
KeySystem.ResetOnSpawn = false

KeyMain.Name = "KeyMain"
KeyMain.Parent = KeySystem
KeyMain.BackgroundColor3 = Color3.fromRGB(49,49,49)
KeyMain.BorderSizePixel = 0
KeyMain.Position = UDim2.new(0.3767,0,0.3855,0)
KeyMain.Size = UDim2.new(0,324,0,133)
KeyMain.Active = true
KeyMain.Draggable = true

KeyEnter.Name = "KeyEnter"
KeyEnter.Parent = KeyMain
KeyEnter.BackgroundColor3 = Color3.fromRGB(75,75,75)
KeyEnter.BorderColor3 = Color3.fromRGB(0,0,0)
KeyEnter.BorderSizePixel = 0
KeyEnter.Position = UDim2.new(0.1913,0,0.6510,0)
KeyEnter.Size = UDim2.new(0,200,0,38)
KeyEnter.Font = Enum.Font.FredokaOne
KeyEnter.PlaceholderText = "Enter Your Key Here!"
KeyEnter.Text = ""
KeyEnter.TextColor3 = Color3.fromRGB(255,255,255)
KeyEnter.TextSize = 14
KeyEnter.TextWrapped = true

UICorner.CornerRadius = UDim.new(0,22)
UICorner.Parent = KeyEnter
UICorner_2.CornerRadius = UDim.new(0,22)
UICorner_2.Parent = KeyMain

TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = KeyMain
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(0,324,0,27)
TitleLabel.Position = UDim2.new(0,0,0.055,0)
TitleLabel.Font = Enum.Font.FredokaOne
TitleLabel.Text = "Key System"
TitleLabel.TextColor3 = Color3.fromRGB(255,255,255)
TitleLabel.TextScaled = true

NotifyLabel.Name = "NotifyLabel"
NotifyLabel.Parent = KeyMain
NotifyLabel.BackgroundTransparency = 1
NotifyLabel.Size = UDim2.new(0,324,0,27)
NotifyLabel.Position = UDim2.new(0,0,0.3525,0)
NotifyLabel.Font = Enum.Font.FredokaOne
NotifyLabel.Text = ""
NotifyLabel.TextColor3 = Color3.fromRGB(255,255,255)
NotifyLabel.TextSize = 16
NotifyLabel.TextTransparency = 1
NotifyLabel.Visible = false
NotifyLabel.TextWrapped = true
NotifyLabel.TextXAlignment = Enum.TextXAlignment.Center

-- helper notify
local function showNotify(text, duration)
    duration = duration or 2
    NotifyLabel.Text = text
    NotifyLabel.Visible = true
    NotifyLabel.TextTransparency = 1
    local tin = TweenService:Create(NotifyLabel, TweenInfo.new(0.12), {TextTransparency = 0})
    tin:Play()
    delay(duration, function()
        local tout = TweenService:Create(NotifyLabel, TweenInfo.new(0.12), {TextTransparency = 1})
        tout:Play()
        tout.Completed:Wait()
        NotifyLabel.Visible = false
    end)
end

-- local file ops
local function saveKeyLocally(key)
    if not has_writefile() then return false end
    local ok = pcall(function() writefile(LOCAL_KEY_FILE, tostring(key)) end)
    return ok
end
local function loadLocalKey()
    if not has_writefile() then return nil end
    local ok, content = pcall(function()
        if isfile(LOCAL_KEY_FILE) then
            return readfile(LOCAL_KEY_FILE)
        end
        return nil
    end)
    if ok then return content end
    return nil
end
local function clearLocalKey()
    if not has_writefile() then return false end
    pcall(function()
        if isfile(LOCAL_KEY_FILE) then
            if type(delfile) == "function" then
                delfile(LOCAL_KEY_FILE)
            else
                writefile(LOCAL_KEY_FILE, "")
            end
        end
    end)
    return true
end

-- try copy link
local function tryCopyLinkToClipboard()
    local copied = false
    pcall(function()
        if has_setclipboard() then
            setclipboard(KeyLink)
            copied = true
        end
    end)
    if copied then
        KeyEnter.Text = KeyLink
        showNotify("Link copied to clipboard!", 2)
    else
        KeyEnter.Text = KeyLink
        showNotify("Clipboard unavailable — link placed in box. Copy manually.", 3)
    end
end

-- fade out function (returns tween completion)
local function fadeOutAndDestroy()
    -- disable input while fading
    KeyEnter.Active = false
    KeyEnter.ClearTextOnFocus = false -- just to be safe
    local fadeOutInfo = TweenInfo.new(1.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local KeyMainFadeOut = TweenService:Create(KeyMain, fadeOutInfo, {BackgroundTransparency = 1})
    local TitleFadeOut = TweenService:Create(TitleLabel, fadeOutInfo, {TextTransparency = 1})
    local NotifyFadeOut = TweenService:Create(NotifyLabel, fadeOutInfo, {TextTransparency = 1})
    local KeyEnterFadeOut = TweenService:Create(KeyEnter, fadeOutInfo, {BackgroundTransparency = 1, TextTransparency = 1})

    -- when main fade out completes, destroy gui
    KeyMainFadeOut.Completed:Connect(function()
        pcall(function() KeySystem:Destroy() end)
    end)

    KeyMainFadeOut:Play()
    TitleFadeOut:Play()
    NotifyFadeOut:Play()
    KeyEnterFadeOut:Play()
end

-- safe load & run remote script (non-blocking)
local function fetchAndRunRemoteScript(url)
    if not url or url == "" then return false, "no url" end
    -- run in its own thread so it can't block UI
    spawn(function()
        local ok, res = pcall(function()
            local src = game:HttpGet(url, true)
            if not src or src == "" then return false, "empty source" end
            local fn, loadErr = loadstring(src)
            if not fn then
                return false, ("loadstring failed: %s"):format(tostring(loadErr))
            end
            -- protect execution
            pcall(fn)
            return true
        end)
        if not ok then
            warn("fetchAndRunRemoteScript pcall failed:", res)
        end
    end)
    return true
end

-- correct-key handler: fades out immediately, saves key, spawns fetch
local function onCorrectKey(given)
    -- visual feedback instantly
    KeyEnter.BorderColor3 = Color3.fromRGB(0, 255, 0)
    showNotify("Key accepted. Launching...", 1.2)

    -- save locally if available (silent failure ok)
    pcall(function() saveKeyLocally(given) end)

    -- fade out & destroy right away
    fadeOutAndDestroy()

    -- run remote script in background (non-blocking)
    pcall(function() fetchAndRunRemoteScript(ScriptLink) end)
end

-- incorrect-key handler
local function onIncorrectKey()
    KeyEnter.BorderColor3 = Color3.fromRGB(255, 0, 0)
    showNotify("Incorrect key. Try again.", 1.6)
    -- reset border after short time
    delay(0.6, function()
        pcall(function() KeyEnter.BorderColor3 = Color3.fromRGB(0, 0, 0) end)
    end)
end

-- main entry check function
local function checkKeyTyped()
    local given = tostring(KeyEnter.Text or "")
    if given == tostring(GKey) then
        onCorrectKey(given)
    else
        onIncorrectKey()
    end
end

-- auto-check saved key at startup (executor only)
spawn(function()
    wait(0.6)
    local saved = loadLocalKey()
    if saved and tostring(saved):match("%S") then
        if tostring(saved) == tostring(GKey) then
            showNotify("Saved key found. Launching...", 1.2)
            wait(0.6)
            -- fade/destroy & run script
            onCorrectKey(saved)
            return
        else
            clearLocalKey()
            showNotify("Saved key invalid — please enter a new one.", 2)
        end
    end
    -- no valid saved key -> attempt to copy link to clipboard and show UI
    tryCopyLinkToClipboard()
end)

-- input binding
KeyEnter.FocusLost:Connect(function(enterPressed)
    if enterPressed then checkKeyTyped() end
end)

-- optional: right-click to clear local saved key (executor-only)
KeyEnter.MouseButton2Click:Connect(function()
    if has_writefile() then
        clearLocalKey()
        showNotify("Saved key cleared.", 1.2)
    end
end)
